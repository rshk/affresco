//
// Grid system
// --------------------------------------------------


// todo: we can improve this thing..


//------------------------------------------------------------------------------
// Fixed (940px)
//------------------------------------------------------------------------------

@mixin grid-offset-fixed ($columns) {
    margin-left: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns + 1));
}
@mixin grid-span-fixed ($columns) {
    width: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1));
}

@mixin grid-fixed($gridColumnWidth, $gridGutterWidth) {
    @for $i from 1 through $gridColumns {
        .span#{$i} {
            @include grid-span-fixed($i);
        }
        .offset#{$i} {
            @include grid-offset-fixed($i);
        }
    }

    .row {
        margin-left: $gridGutterWidth * -1;
        @include clearfix();
    }

    [class*="span"] {
        float: left;
        min-height: 1px; // prevent collapsing columns
        margin-left: $gridGutterWidth;
    }

    // Set the container width, and override it for fixed navbars in media queries
    .container,
    .navbar-static-top .container,
    .navbar-fixed-top .container,
    .navbar-fixed-bottom .container {
        @include grid-span-fixed($gridColumns);
    }
}



//------------------------------------------------------------------------------
// grid-Fluid (940px)
//------------------------------------------------------------------------------

@mixin grid-offset-fluid($columns) {
    margin-left:
        ($fluidGridColumnWidth * $columns)
        + ($fluidGridGutterWidth * ($columns - 1))
        + ($fluidGridGutterWidth * 2);
    *margin-left:
        ($fluidGridColumnWidth * $columns)
        + ($fluidGridGutterWidth * ($columns - 1))
        - (50px / $gridRowWidth)
        + ($fluidGridGutterWidth * 2)
        - (50px / $gridRowWidth);
}

@mixin grid-offset-firstchild-fluid($columns) {
    margin-left:
        ($fluidGridColumnWidth * $columns)
        + ($fluidGridGutterWidth * ($columns - 1))
        + ($fluidGridGutterWidth);
    *margin-left:
        ($fluidGridColumnWidth * $columns)
        + ($fluidGridGutterWidth * ($columns - 1))
        - (50px / $gridRowWidth)
        + $fluidGridGutterWidth
        - (50px / $gridRowWidth);
}

@mixin grid-span-fluid($columns) {
    width: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1));
    *width: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) - (50px / $gridRowWidth);
}

@mixin grid-fluid($fluidGridColumnWidth, $fluidGridGutterWidth) {
    @include clearfix();
    [class*=" span"], [class^="span"] {
        @include input-block-level();
        float: left;
        margin-left: $fluidGridGutterWidth;
        *margin-left: $fluidGridGutterWidth - (50px / $gridRowWidth); // whut?

        &:first-child {
            margin-left: 0;
        }
    }

    @for $i from 1 through $gridColumns {
        .span#{$i} {
            @include grid-span-fluid($i);
        }
        .offset#{$i} {
            @include grid-offset-fluid($i);
        }
        .offset#{$i}:first-child {
            @include grid-offset-firstchild-fluid($i);
        }
    }

    // Space grid-sized controls properly if multiple per line
    .controls-row [class*=" span"] + [class^="span"],
    .controls-row [class^="span"]  + [class^="span"],
    .controls-row [class*=" span"] + [class*=" span"],
    .controls-row [class^="span"]  + [class*=" span"] {
        margin-left: $fluidGridGutterWidth;
    }
}



//------------------------------------------------------------------------------
// Grid for inputs
//------------------------------------------------------------------------------

@mixin input-span($columns) {
    width: (($gridColumnWidth) * $columns) + ($gridGutterWidth * ($columns - 1)) - 14;
}

@mixin grid-input($gridColumnWidth, $gridGutterWidth) {

    @for $index from 1 through $gridColumns {
        input.span#{$index},
        textarea.span#{$index},
        .uneditable-input.span#{$index} {
            @include input-span($index);
        }
    }

    input,
    textarea,
    .uneditable-input {
        margin-left: 0; // override margin-left from core grid system
    }

    // Space grid-sized controls properly if multiple per line
    .controls-row [class*="span"] + [class*="span"] {
        margin-left: $gridGutterWidth;
    }

}

//------------------------------------------------------------------------------
// Prepare the default grids
//------------------------------------------------------------------------------
@include grid-fixed($gridColumnWidth, $gridGutterWidth);
.row-fluid {
    width: 100%;
    @include grid-fluid($fluidGridColumnWidth, $fluidGridGutterWidth);
}


//------------------------------------------------------------------------------
// Reset utility classes due to specificity
//------------------------------------------------------------------------------
@mixin row-fluid-class-fix {
    [class*=" span"], [class^="span"] {
        .hide {
            display: none;
        }
        .pull-right {
            float: right;
        }
    }
}

.row-fluid { @include row-fluid-class-fix; }
@include row-fluid-class-fix;
