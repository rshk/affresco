//
// Mixins for the Grid
// --------------------------------------------------



// Grid System
// -----------

// Centered container element
@mixin container-fixed() {
    margin-right: auto;
    margin-left: auto;
    @include clearfix();
}

// Table columns
@mixin tableColumns($columnSpan: 1) {
    float: none; // undo default grid column styles
    width:
        (($gridColumnWidth) * $columnSpan)
        + ($gridGutterWidth * ($columnSpan - 1))
        - 16; // 16 is total padding on left and right of table cells
    margin-left: 0; // undo default grid column styles
}

// Make a Grid
// Use .makeRow and .makeColumn to assign semantic layouts grid system behavior
@mixin makeRow() {
    margin-left: $gridGutterWidth * -1;
    @include clearfix();
}

@mixin makeColumn($columns: 1, $offset: 0) {
    float: left;
    margin-left:
        ($gridColumnWidth * $offset)
        + ($gridGutterWidth * ($offset - 1))
        + ($gridGutterWidth * 2);
    width:
        ($gridColumnWidth * $columns)
        + ($gridGutterWidth * ($columns - 1));
}


@mixin grid-core($gridColumnWidth, $gridGutterWidth) {
    .row {
        margin-left: $gridGutterWidth * -1;
        @include clearfix();
    }

    [class*="span"] {
        float: left;
        min-height: 1px; // prevent collapsing columns
        margin-left: $gridGutterWidth;
    }

    // Set the container width, and override it for fixed navbars
    // in media queries
    .container,
    .navbar-static-top .container,
    .navbar-fixed-top .container,
    .navbar-fixed-bottom .container {
        @include grid-core-span($gridColumns);
    }

    @for $index from 1 through $gridColumns {
        .span#{$index} {
            @include grid-core-span($index);
        }
        .offset#{$index} {
            @include grid-core-offset($index);
        }
    }

}

@mixin grid-core-span($columns) {
    width:
        ($gridColumnWidth * $columns)
        + ($gridGutterWidth * ($columns - 1));
}

@mixin grid-core-offset($columns) {
    margin-left:
        ($gridColumnWidth * $columns)
        + ($gridGutterWidth * ($columns + 1));
}

@mixin grid-fluid ($fluidGridColumnWidth, $fluidGridGutterWidth) {
    .row-fluid {
        width: 100%;
        @include clearfix();

        [class*="span"] {
            @include input-block-level();
            float: left;
            margin-left: $fluidGridGutterWidth;
            // *margin-left: $fluidGridGutterWidth - (.5 / $gridRowWidth * 100 * 1%);
            *margin-left: $fluidGridGutterWidth - (50px / $gridRowWidth);
            &:first-child {
                margin-left: 0;
            }
        }

        // Space grid-sized controls properly if multiple per line
        .controls-row [class*="span"] + [class*="span"] {
            margin-left: $fluidGridGutterWidth;
        }

        @for $index from 1 through $gridColumns {
            .span#{$index} {
                @include grid-fluid-span($index);
            }
            .offset#{$index} {
                @include grid-fluid-offset($index);
            }
            .offset#{$index}:first-child {
                @include grid-fluid-offset-firstchild($index);
            }
        }

    }
}

@mixin grid-fluid-span($columns) {
    width:
        ($fluidGridColumnWidth * $columns)
        + ($fluidGridGutterWidth * ($columns - 1));
    // *width: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) - (.5 / $gridRowWidth * 100 * 1%);
    *width:
        ($fluidGridColumnWidth * $columns)
        + ($fluidGridGutterWidth * ($columns - 1))
        - (50px / $gridRowWidth);
}

@mixin grid-fluid-offset($columns) {
    margin-left:
        ($fluidGridColumnWidth * $columns)
        + ($fluidGridGutterWidth * ($columns - 1))
        + ($fluidGridGutterWidth*2);
    // *margin-left: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) - (.5 / $gridRowWidth * 100 * 1%) + ($fluidGridGutterWidth*2) - (.5 / $gridRowWidth * 100 * 1%);
    *margin-left:
        ($fluidGridColumnWidth * $columns)
        + ($fluidGridGutterWidth * ($columns - 1))
        - (50px / $gridRowWidth)
        + ($fluidGridGutterWidth*2)
        - (50px / $gridRowWidth);
}

@mixin grid-fluid-offset-firstchild ($columns) {
    margin-left:
        ($fluidGridColumnWidth * $columns)
        + ($fluidGridGutterWidth * ($columns - 1))
        + ($fluidGridGutterWidth);
    // *margin-left: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) - (.5 / $gridRowWidth * 100 * 1%) + $fluidGridGutterWidth - (.5 / $gridRowWidth * 100 * 1%);
    *margin-left:
        ($fluidGridColumnWidth * $columns)
        + ($fluidGridGutterWidth * ($columns - 1))
        - (50px / $gridRowWidth)
        + $fluidGridGutterWidth
        - (50px / $gridRowWidth);
}

@mixin grid-input($gridColumnWidth, $gridGutterWidth) {
    @for $index from 1 through $gridColumns {
        input.span#{$index},
        textarea.span#{$index},
        .uneditable-input.span#{$index} {
            @include grind-input-span($index);
        }
    }

    input,
    textarea,
    .uneditable-input {
        margin-left: 0; // override margin-left from core grid system
    }

    // Space grid-sized controls properly if multiple per line
    .controls-row [class*="span"] + [class*="span"] {
        margin-left: $gridGutterWidth;
    }
}

@mixin grind-input-span($columns) {
    width: (($gridColumnWidth) * $columns) + ($gridGutterWidth * ($columns - 1)) - 14;
}


// === The actual grid =========================================================

// Fixed (940px)
@include grid-core($gridColumnWidth, $gridGutterWidth);

// Fluid (940px)
@include grid-fluid($fluidGridColumnWidth, $fluidGridGutterWidth);


// Reset utility classes due to specificity
[class*="span"].hide,
.row-fluid [class*="span"].hide {
    display: none;
}

[class*="span"].pull-right,
.row-fluid [class*="span"].pull-right {
    float: right;
}
